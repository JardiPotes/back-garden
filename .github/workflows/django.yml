name: Django CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
      # from installing Poetry every time, which can be slow. Note the use of the Poetry version
      # number in the cache key, and the "-0" suffix: this allows you to invalidate the cache
      # manually if/when you want to upgrade Poetry, or if something goes wrong. This could be
      # mildly cleaner by using an environment variable, but I don't really care.
      - name: cache poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.1.12-0

        # Install Poetry. You could do this manually, or there are several actions that do this.
        # `snok/install-poetry` seems to be minimal yet complete, and really just calls out to
        # Poetry's default install script, which feels correct. I pin the Poetry version here
        # because Poetry does occasionally change APIs between versions and I don't want my
        # actions to break if it does.
        #
        # The key configuration value here is `virtualenvs-in-project: true`: this creates the
        # venv as a `.venv` in your testing directory, which allows the next step to easily
        # cache it.
      - uses: snok/install-poetry@v1
        with:
          version: 1.1.12
          virtualenvs-create: true
          virtualenvs-in-project: true

        # Install dependencies. `--no-root` means "install all dependencies but not the project
        # itself", which is what you want to avoid caching _your_ code. The `if` statement
        # ensures this only runs on a cache miss.
      - run: |
          poetry update
          poetry install -E "pgsql" --no-interaction --no-root

      - name: Launch DB
        run: |
          cp .env.example .env
          docker-compose up -d
      - name: Run Tests
        run: |
          poetry run python manage.py test
